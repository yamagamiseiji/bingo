#+setupfile: /home/yamagami/org/macros-org/org/org-macros.setup
#           Time-stamp: <2021-10-27 16:37:25 yamagami>
#+title: Ledger --- 給与・年金の仕訳
#+date: [2021-10-27]
#+language: ja

#+link: file file+sys:../static/
#+hugo_base_dir: ~/peace-blog/bingo/
#+hugo_section: posts
#+hugo_tags: ledger pension 年金 給与 仕訳 複式簿記
#+hugo_categories: comp

#+options: toc:nil
#+draft: false


今日は[[https://www.ledger-cli.org/][ *Ledge-cli* ]]を使って給与・年金を仕訳してみます。

お題は：
#+begin_example
サラリーマン、年金受給者は 家計簿で
給与、年金をどのように仕訳できるか
#+end_example

[[https://www.ledger-cli.org/][Ledger-cli]]の主な特長を箇条書きにすると次のとおりです。
- 複式簿記
- 会計データはプレーンテキストファイル
- コマンドライン
- フリーソフト

対応しているプラットフォームは GNU/linux, Windows, Mac OS X, BSDなどです。テキストファイルが編集できるエディター[fn:emacs-please]なら基本的には何でもOKです。

[fn:emacs-please] EmacsやVIMを使うヒトが多いようです。個人的にはEmacsが最適だと思いますが・・・。

* まずは給与明細

伝統的な複式簿記の *借方・貸方* 方式でも もちろん仕訳できます。
けれども一般人にはとてもハードルが高いです（脚注[fn:debit-credit]をごらんください）。

では
*Ledger* でサラリーマンの給与を仕訳してみましょう。

次の例は
[[https://www.microsoft.com/ja-jp/microsoft-365?rtc=1][Micorosoft 365]] サイトの[[https://www.microsoft.com/ja-jp/office/pipc/template/result.aspx?id=13293][給与管理表 (明細書付き)]] にあげられている数値を使って
Ledger向けのトランザクションを書いたものです。
#+caption: Ledgerによる給与の仕訳例
#+name: kyuyo-meisai
#+begin_src
2021/10/24 * (株) XYZ
    Income:基本給                         -250,000 JPY
    Income:諸手当                          -20,000 JPY
    ;
    Expenses:社会保険:健康保険                15,000 JPY
    Expenses:社会保険:厚生年金                28,000 JPY
    Expenses:社会保険:雇用保険                 3,000 JPY
    Expenses:社会保険:生命保険                 1,000 JPY
    ;
    Expenses:その他:組合費                      700 JPY
    Expenses:その他:その他                        0 JPY
    ;
    Expenses:租税公課:所得税                   6,500 JPY
    Expenses:租税公課:住民税                  15,000 JPY
    ;
    Assets:積立                             　8,000 JPY
    ;
    Assets:ABC銀行
#+end_src
同じ数字が2回書かれることもなく、見た目からしてシンプルですよね :smile: 

テキストエディタでこれを書いて保存するだけ、です。

*補足説明：*
- Ledgerでは、貸方・借方の概念を前提とせず[fn:概念]、 *アカウント* （account; 勘定科目）ベースで複式簿記の *原理* を具現化しています。
- アカウントの第1レベルである Income, Expenses, Assets... などは収入、経費、資産などのように *日本語* にしても全然 問題ありません。
- 最終行の =Assets:ABC銀行= の行に *金額* が入っていませんが、Ledgerでは一つのトランザクション中の1アカウントだけは金額を *ブランク* にすることが許容されます。そこはLedgerが自動的に補完してくれます。
- Ledgerでは *通貨単位* （上の例では =JPY= ）は *必須* です。Ledgerでは１トランザクション内に複数の通貨（JPY, $, &euro; など)を混在させることができます。当日の通貨の交換レートを為替レートデータベース（ディフォルトでは =.prices.db= ファイル）から読み込んで換算してくれます。

上の内容を =myledger.dat= ファイルに保存して、
 =ledger reg= を実行すると
次のようになります[fn:列崩壊]。
#+name: shell-1
#+begin_example
$ ledger reg  -f myledger.dat
2021/10/24 (株) XYZ   Income:基本給             -250,000 JPY   -250,000 JPY
                      Income:諸手当              -20,000 JPY   -270,000 JPY
                      Expenses:社会保険:健康保険    15,000 JPY   -255,000 JPY
                      Expenses:社会保険:厚生年金    28,000 JPY   -227,000 JPY
                      Expenses:社会保険:雇用保険    3,000 JPY   -224,000 JPY
                      Expenses:社会保険:生命保険    1,000 JPY   -223,000 JPY
                      Expenses:その他:組合費         700 JPY   -222,300 JPY
                      Expenses:その他:その他               0   -222,300 JPY
                      Expenses:租税公課:所得税      6,500 JPY   -215,800 JPY
                      Expenses:租税公課:住民税     15,000 JPY   -200,800 JPY
                      Assets:積立                 8,000 JPY   -192,800 JPY
                      Assets:ABC銀行             192,800 JPY            0
#+end_example
ABC銀行への振込額(192,800円)が補完されています。

[fn:概念] 概念を前提としないだけでなく、Ledgerでは借方・貸方の *用語* すら必要としません。しかし =--dc= オプションを使うとLedgerの出力を借方・貸方のフォーマットに変換して表示することができます。

[fn:debit-credit] 給与を *借方・貸方* 方式で家計簿にまとめる方法については、
「[[https://webshufu.com/take-home-pay/#i-2][給与収入の仕訳は手取り金額と法定外控除分の二本立て]]」（中川勉社会保険労務士事務所）でわかりやすく説明されています（図[[nakagawa]]）。
#+caption: 「給与収入の仕訳は手取り金額と法定外控除分の二本立て」より
#+name:nakagawa
#+attr_html: :width 90%
[[file:debit-credit-salary-trx.jpg]]

このサイトは、
天引きされる *保険料* や *税金* は自分でコントロールできないので、家計簿には[[https://webshufu.com/take-home-pay/#i-2][「記入する必要はありません」]]という立場です。

[fn:列崩壊] 日本語を含むLedgerの出力は、残念ながら列がきれいに揃わないことがあります。出力の
*列崩壊* が許容されない場合には、ちょっとした小技を必要とします。それについては後日、別の記事にして紹介します。

* つぎは年金
つぎにLedgerで年金を仕訳した例をあげます。金額はあてずっぽうです。
#+caption: 複式簿記による国民年金の仕訳
#+name: pension
#+begin_src
2021/10/15 * 国民年金
   Income:国民年金             (-100,000 JPY /2) ; [2021/08/15]
   Income:国民年金             (-100,000 JPY /2) ; [2021/09/15]
   ;
   Expenses:社会保険:介護保険     (15,000 JPY /2) ; [2021/08/15]
   Expenses:社会保険:介護保険     (15,000 JPY /2) ; [2021/09/15]
   ;
   Expenses:租税公課:地方税       (20,000 JPY /2) ; [2021/08/15]
   Expenses:租税公課:地方税       (20,000 JPY /2) ; [2021/09/15]
   ;
   Assets:ABC銀行
#+end_src
こちらは金額欄、それから行末の日付欄などが一見「何？」という感じですね。

*補足説明：*
- 年金は2ヶ月に1回、偶数月の15日に、その前の *2ヶ月分* が支給されます。各行の右端の =[ ]= カッコ内の日付がそれを表現しています。支給日は10月15日ですが、実際には8月分と9月分の収入となることをLedger風に表現しています。
- =( )= で囲まれた金額欄内には2で割る *式* が書かれています。
- 2ヶ月分の支給額が2で割り切れない時には、たとえば =(floor (100,451 JPY / 2))= とすれば、小数点以下が *切り捨て* られます。ちなみに 切り上げは =ceiling()=, 四捨五入は =round()= です。


このLedgerファイルの =reg= コマンド出力は次のようになります。ちゃんと年金額と控除金額が8月分と9月分に振り分けられています。
#+begin_src sh
$ ledger reg -f myledger.dat
2021/08/15 国民年金  Income:国民年金            -50,000 JPY    -50,000 JPY
                                    Expenses:社会保険:介護保険    7,500 JPY    -42,500 JPY
                                    Expenses:租税公課:地方税      10,000 JPY   -32,500 JPY
2021/09/15 国民年金   Income:国民年金            -50,000 JPY    -82,500 JPY
                                     Expenses:社会保険:介護保険    7,500 JPY    -75,000 JPY
                                     Expenses:租税公課:地方税     10,000 JPY    -65,000 JPY
2021/10/15 国民年金   Assets:ABC銀行              65,000 JPY 
#+end_src
最終行の =Assets:ABC銀行= の日付は、銀行振込みの日付＝10月15日になっています。

* メリット・デメリット
このように家計簿で給料や年金の *振込金額* だけではなく、その *明細* も仕訳することのメリット・デメリットは何でしょうか。

最大のメリットは、  
*税金* や *保険料* あるいは *積立預金* などを分析して正確に理解できるようになることです。

税金について言えば、 *特別徴収* される以外の税金も合わせて計算できます。消費税も含めたいならそれもできますし、 *悪名高い* ガソリン税や酒税、入湯税、入場税なども1円単位でおさえることができます。
それらの *納税金額* をワンラインのコマンドで、
任意の期間、任意の組み合わせで
簡単・正確に得ることができます。

国だけでなく多くの *税金専門家* も、これらの税金は「仕訳する必要が無い」と言ってますが、きちんと仕訳してデータ化し可視化して悪いわけではありません。都合が悪いのは *徴税する主体* の方だけです :smile:

\\
デメリットとして考えられるのは、仕訳に余計な *手間* がかかるのでは、ということです。
しかしLedgerの *自動転記機能* （automated transactions）や *定期的トランザクション* （scheduled transactions）の機能（[[#teiki-trx][付録参照]]）を使えば、日常的な仕訳・転記に手間が増えることはほとんどありません。

一番 深刻なデメリットは、分析して税額がはっきりすると、その金額の大きさに *絶望* して *心理的* に落ち込む可能性があることでしょうか :wink:

\\

* 付録：トランザクションのスケジューリング
:PROPERTIES:
:CUSTOM_ID: teiki-trx
:END:

毎回、長たらしいトランザクションを手入力するのはヤボです。もし、Emacsのユーザならば、 =~/ledger-schedule.ledger= ファイルに次のようなエントリを書いておきましょう[fn:only-for-emacs-mode]。

第1行目の =[*/E/15]= は毎偶数月（even）の15日を意味します。
#+begin_src
[*/E/15] 国民年金
    Income:国民年金      (-100,000 JPY /2) ; [2021/xx/15]
    Income:国民年金      (-100,866 JPY /2) ; [2021/yy/15]
    ;
    Expenses:社会保険:介護保険 (15,000 JPY /2) ; [2021/xx/15]
    Expenses:社会保険:介護保険 (12,700 JPY /2) ; [2021/yy/15]
    ; 
    Expenses:租税公課:地方税   (20,000 JPY /2) ; [2021/xx/15]
    Expenses:租税公課:地方税   (20,000 JPY /2) ; [2021/yy/15]
    ;
    Assets:ABC銀行
#+end_src
そうすると、Emacs でLedgerファイルを開いている際に、 =C-c, u= を叩くと、年金支払い日が近づくと
=[*/E/15]= のところに具体的な日付が入ったトランザクション例が表示されます。それをそのままコピペして修正が必要な箇所だけを直せばよいわけです。

ちなみに毎月25日は =[*/*/25]=, 偶数月の1日は =[*/O/01]=, 毎年4月1日なら =[*/04/01]= のように指定します。

[fn:only-for-emacs-mode] これはEmacsの *Ledger-mode* 内のみの機能です。他にもたくさんの機能があります。詳しくは[[https://www.ledger-cli.org/3.0/doc/ledger-mode.html][Ledger-mode manual]] を見てください。

* Footnotes:

* COMMENT WORK
昨日（2021/10/22）、
「年金の転記」に今まで気づかなかった穴があることに気づきました。
2年以上（or まだ2年）Ledgerを使っていたのに・・・。

きっかけは、 *=payee-ranking_plotter=* というスクリプトの出力がバグったこと。

このスクリプトは、
指定した期間内における *支出額* を *支払先* （payee)別にソートして、上位13位までを *横棒グラフ* に描くというものです。期間のディフォールトは1年間なので、引数なしで起動すると、図[[fig1]] のような出力になります。
#+caption: =payee-ranking_plotter= の出力例（支払先の名前は一部マスクしています）
#+name:fig1
#+attr_html: :width 90%
[[file:payeee-12m-ranking.jpg]]

これは正常な出力例ですが、昨日の出力では、この図の中に「 *国民年金* 」という項目が混入していました。

国民年金は *支出* ではありません。支出ランキングに乗ってくるのは明らかなバグ。
どうしてこんな *アホ* なことが起こったかの説明です。

* COMMENT =payee-ranking_plotter= スクリプト内のクエリパート
次のようになっています：
#+caption: スクリプト内のクエリ部分
#+name: src-1
  #+begin_src
 ：
ledger bal ^expenses --group-by='payee' -b ${from_date} --current\
     --depth 1 --total-data -o ./tmp-raw.txt
 ：
#+end_src
つまり、
  単純に ~^expenses --group-by='payee'~ でクエリして balance を計算して、それを一時ファイル =tmp-raw.txt= に保存しています。

年金のトランザクションを見ると次のようになっていました(金額は実際のものではなくて、改変しています)：
#+caption: ledgerファイル内の国民年金の転記（修正前）
#+name: bad-trans
#+begin_src
＜修正前＞
2021/10/15 * 国民年金
   Income:国民年金              (-100,866 JPY /2) ; [2021/08/15]
   Expenses:Insurance:介護保険    (18,400 JPY /2) ; [2021/08/15]
   Expenses:租税公課:地方税       (26,800 JPY /2) ; [2021/08/15]
   Income:国民年金              (-100,866 JPY /2) ; [2021/09/15]
   Expenses:Insurance:介護保険    (18,400 JPY /2) ; [2021/09/15]
   Expenses:租税公課:地方税       ( 26,800 JPY /2) ; [2021/09/15]
   Assets:Bank
#+end_src

このトランザクションだと、 =^expenses= でクエリした後、payeeで ~--gropu-by=~ すれば、とうぜん次の支出が計上されます。
#+begin_example
   Expenses:Insurance:介護保険
   Expenses:租税公課:地方税 
#+end_example

** ソースコード[[bad-trans]]を使っていたワケ
なぜこんな風に転記したかの理由。
- 国民年金は、 *介護保険* と *住民税* が *天引* [fn:天引]されて支給されます。引かれた後の *振込金額* だけを銀行口座からゲットして記帳していると、天引された金額はunknownになります。
  
- そこでこれまでは、ソースコード[[bad-trans]]のように、「国民年金」のトランザクションを1ブロックにして、その中に、収入（Income）と支出（Expenses）を両方とも書いておくことにしました。こうすることで、年金支給の明細がわかりやすく記述できます。

[fn:天引]  この言葉はほんとうに *奇異* です。本来、自分のものである金を抜いている主体は *天(heaven)* ではありませんよね。国または地方の行政組織です。国民にサービスする機関のくせして、天とは生意気。「特別徴収」という語の「特別」も奇異。「無許可徴収」ですね
  
** しかし昨日までは
~--gropu-by='payee'~ 
という仕掛けを使うと、支払先の分析がとても簡単にできることに目を奪われていました。
#+begin_example
--group-by='payee' を使うときには
payeeに「国民年金」のように収入と支出の両側面をもつトランザクションを
書いてはならない
#+end_example

これが今回の教訓です。

** 対策
そこで、ソースコード[[bad-trans]] は次のように、3つのパートに分けた形に書き換えることにしました[fn:じつは]。
#+begin_src
2021/10/15 * 国民年金
    Income:国民年金                   (-100,866 JPY /2) ; [2021/08/15]
    Income:国民年金                   (-100,866 JPY /2) ; [2021/09/15]
    Assets:Bank

2021/10/15 * 介護保険
    Expenses:Insurance:介護保険         (18,400 JPY /2) ; [2021/08/15]
    Expenses:Insurance:介護保険         (18,400 JPY /2) ; [2021/09/15]
    Assets:Bank

2021/10/15 * 個人住民税（特別徴収）
    Expenses:租税公課:地方税             (26,800 JPY /2) ; [2021/08/15]
    Expenses:租税公課:地方税             (26,800 JPY /2) ; [2021/09/15]
    Assets:Bank
#+end_src
[fn:じつは] Ledgerを使い始めた最初の時期は、このような描き方をしていました。1ブロック化するようになったのは比較的最近になってからです。

** 補足説明
- 年金は2ヶ月に一度、偶数付きにその月より前の2ヶ月分が支払われます。各トランザクション内の金額の後ろにある =; [ ]= 内の日付はそのことを示しています。



# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:

