#+setupfile: /home/yamagami/org/macros-org/org/org-macros.setup
#           Time-stamp: <2022-01-02 14:13:36 yamagami>
#+title: Ledger --- 支払先のタイプミスをチェックする
#+date: [2022-12-31 ]
#+language: ja

#+link: file file+sys:../static/
#+hugo_base_dir: ~/peace-blog/bingo/
#+hugo_section: posts
#+hugo_tags: farming food
#+hugo_categories: comp

#+options: toc:nil
#+draft: true

* 
家計簿でも会社の帳簿でも、支払先の名前をタイプミスするとちょっと面倒なことが起こる。
会計ソフトにはそれへの対応策が含まれている？

Ledgerでも簡単で便利なツールが用意されています。

以前（2019/10/04）、
[[https://bred-in-bingo.netlify.app/posts/9th-step_ledger/#payees%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89][プレーンテキストファイルで「複式」家計簿(9)]] 
で =payees= コマンドと =-by-payee (-P)= オプションについて簡単に紹介。

** 復習しておきます
=payees= コマンドには大きく分けて2通りの使い方があります。
引数なしで起動すると =myledger.data= に含まれる全ての支払先名が表示されます。
#+begin_src sh
  $ ledger payees -f myledger.data
ANA
APITA
ATM
AWS
Amazon
　：
#+end_src
これに =--count= オプションを付けて起動すると、各支払先の先頭に出現頻度が表示されます[fn:出現頻度]。
    #+begin_src sh
    $ledger payees --count -f myledger.dat
    12 ANA
     2 APITA
     108 ATM
     56 AWS
     282 Amazon
　　　：
    #+end_src
引数をつけて起動する方法もあります。たとえば、お酒(liquor)の購入先とその回数を知りたいときには次のようにします。
      #+begin_src sh
$ ledger payees liquor --count
60 Costco
1 KALDI
1 OKストア
1 まるきゅう
10 やまや
　　：
      #+end_src

[fn:出現頻度] この場合の頻度とはトランザクションの数ではなくて、トランザクション内に含まれるアカウントの数になっています。なので、たとえば\\
2020/10/10 レストランHOGE\\
　Expenses:Dinner         3,000 JPY\\
　Expenses:Grocery:Liquor 1,200 JPY\\
　visacard\\
レストランHOGEで一度しか食事してない場合でも ~ledger payees --count= すると、\\
　3 レストランHOGE\\
になります。


* さて本題
=--check-payees= オプションは
Enable strict and pedantic checking for payees as well as accounts, commodities and tags.

#+begin_src sh
$ led b --check-payees -f myledger.data
#+end_src



      



ここでは、もう少し詳しく手順を説明します。



  

* Footnotes:



* COMMENT メモ

org-source$ grep payee *.org
9th-step_ledger.org:** payeesコマンド
9th-step_ledger.org:=payees= コマンドは指定した正規表現に一致するトランザクションの支払先 =payee= をリストにして表示します。これも支払先の名称のタイプミスや表記ゆらぎを修正するのに便利です。 =payees= コマンドに =-count= オプションをつけると、 =accounts= コマンドと同じように、出現した頻度が行頭に表示されます:
9th-step_ledger.org:$ led payees eatout --count
9th-step_ledger.org:=accounts= や =payees= を使わないでLedgerファイルをクリーニングしろと言われたら、死んだほうがましです（誇張ですw）。
9th-step_ledger.org:** =--by-payee= （ =-P= ）オプション
9th-step_ledger.org:この =-P= オプションは、regレポートする際に、正規表現にマッチするトランザクションを支払先 =payee= の名前でグルーピングして表示するオプションです。次の例は、 =eatout= というアカウント（外食）について、外食先を金額の大きい順にソートした結果の抜粋です（日付、金額は当てずっぽうです）：


厳密にやるなら --strict を使う


$ led b --check-payees
Warning: "/home/yamagami/local-ledger-directory/seiji-current.ledger", line 3266: Unknown payee 'カインズホーム'
Warning: "/home/yamagami/local-ledger-directory/seiji-current.ledger", line 3365: Unknown payee 'ITSCOM'
Warning: "/home/yamagami/local-ledger-directory/seiji-current.ledger", line 3458: Unknown payee 'Dropbox'
Warning: "/home/yamagami/local-ledger-directory/seiji-current.ledger", line 3498: Unknown payee 'DAISO'
      87,188,688 JPY  Assets
      77,326,452 JPY    Bank
          25,517 JPY      JA
                   0      Mizuho

以下略

$ led --count payees | grep カインズホーム
3 カインズホーム
yamagami@ikuta:~$ led --count payees | grep カインズ
182 カインズ
3 カインズホーム
yamagami@ikuta:~$ 


＝＝＝＝＝＝＝＝＝＝＝＝＝


$ led --count payees | grep ITSCOM
2 ITSCOM
yamagami@ikuta:~$ led --count payees | grep -i ITSCOM
2 ITSCOM
56 iTSCOM




$ led --count payees | grep -i DAISO
2 DAISO
yamagami@ikuta:~$ led --count payees | grep -i ダイソー
62 ダイソー
yamagami@ikuta:~$ 






$ led b --check-payees  --pending
Warning: "/home/yamagami/local-ledger-directory/seiji-current.ledger", line 3266: Unknown payee 'カインズホーム'
Warning: "/home/yamagami/local-ledger-directory/seiji-current.ledger", line 3365: Unknown payee 'ITSCOM'
Warning: "/home/yamagami/local-ledger-directory/seiji-current.ledger", line 3458: Unknown payee 'Dropbox'
Warning: "/home/yamagami/local-ledger-directory/seiji-current.ledger", line 3498: Unknown payee 'DAISO'



$ led payees --count|grep -i apita
2 APITA
yamagami@ikuta:~$ led payees --count|grep -i アピタ
148 アピタ
2 アピタ（専門店）

$ led p @APITA
2019/09/22 * APITA
    Expenses:交際費:Gifts                     4,276 JPY
    ; travel: fukuyama2k19
    ; 福山おみやげ*2 @1980
    Liabilities:ResonaVisa:hinako


    



$ led payees orico    これは便利だが、特にpayeeを検索語にして検索するわけではなく、report-query して、それにマッチするpayeeを表示するという機能



Centre des Monuments Nationaux
Costco
Costco(アップグレード費)
Costco（年会費）
Dropbox
ETCマイレージサービス
HISオンライン
JR北海道
La Grande Epicerie Paris
NEXCO
Oricoポイント調整
Orsay Cafe Campana
口座振替 Orico
市内交通
首都高


--strict　に備えて、account名を account.dat に追加する方法
#+begin_src
$ led accounts | awk '{print "account " $0}'
#+end_src

# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:

https://groups.google.com/g/ledger-cli/c/rz8DWpiHYXo?pli=1
wiegley の説明
## New 'payee' directive

You can now pre-declare payee names. This only has effect if --check-payees
is used in addition to --strict or --pedantic (see below).

payee KFC
payee Payless

### Payee sub-directives

The 'payee' directive supports one optional sub-directive, if it immediately
follows the payee directive and if it begins with whitespace:

payee KFC
alias KENTUCKY FRIED CHICKEN

The 'alias' directive provides a regexp which, if it matches a parsed payee,
the declared payee name is substituted:

2012-02-27 KENTUCKY FRIED CHICKEN ; will be read as being 'KFC'
...
# NEW OPTIONS

## --explicit

When --explicit is given, *only* predeclarations establish the "known-ness" of
parsed entities. I.e., if you didn't predeclare it, you don't expect to ever
see it.

## --strict

With --strict, referring to unknown entities causes a warning.

## --pedantic

With --pedantic, referring to unknown entities causes an error.

## --check-payees

By default, even with --strict or --pedantic, payees are not checked for
known-ness because it is quite typical that new payees are used in uncleared
transactions, or without declaring them. The --check-payees option enables
--strict and --pedantic checking for payees as well.

------------------------------------------------------------------------------
# EXAMPLE

Here's a real example from the baseline tests. Remember that options can be
specified directly within your Ledger file!

--explicit
--pedantic

commodity $
format $1,000.00

account Assets:Cash
assert abs(amount) <= 20
check commodity == '$'

account Expenses:Food
alias food
payee KFC

2012-02-27 KFC
Expenses:Unknown $20.00
Assets:Cash

2012-02-28 KFC
food $20.00
Assets:Cash

test reg --strict
12-Feb-27 KFC Expenses:Food $20.00 $20.00
Assets:Cash $-20.00 0
12-Feb-28 KFC Expenses:Food $20.00 $20.00
Assets:Cash $-20.00 0
end test






$ led payees --count | sort -rn 
310 Costco
282 Amazon
265 NEXCO
257 ベイシア
231 ENEOS SS
218 セブンイレブン
214 市内交通
。。。
