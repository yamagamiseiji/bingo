<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<head>
<!-- 2022-01-11 火 21:19 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>郵便番号・住所の簡易検索スクリプト</title>
<meta name="author" content="YAMAGAMI" />
<meta name="generator" content="Org Mode" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
// @license magnet:?xt=urn:btih:e95b018ef3580986a04669f1b5879592219e2a7a&dn=public-domain.txt Public Domain
<!--/*--><![CDATA[/*><!--*/
     function CodeHighlightOn(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.add("code-highlighted");
         target.classList.add("code-highlighted");
       }
     }
     function CodeHighlightOff(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.remove("code-highlighted");
         target.classList.remove("code-highlighted");
       }
     }
    /*]]>*///-->
// @license-end
</script>
</head>
<body>
<div id="content">
<h1 class="title">郵便番号・住所の簡易検索スクリプト</h1>

<div id="outline-container-org57fd1d3" class="outline-2">
<h2 id="org57fd1d3"><span class="section-number-2">1</span> つくったわけ</h2>
<div class="outline-text-2" id="text-1">
<p>
2021年の年末に年賀状の宛名データが壊れました<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>。
その復旧作業をやっているときに、
郵便番号と住所のどちらからでもお互いにコマンドラインで検索できる道具が欲しくなりました<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>。
</p>

<p>
そこで大急ぎで作ったのが <b><code>postal-coder.sh</code></b> 。
とても単純 素朴ですが、
とりあえずこれで過去3年間の年賀状をめくりながら、
宛名ファイル（CSV）を作り直し<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>、なんとか宛名印刷を完了することができました<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup>。
</p>

<p>
宛名印刷が終わった後、
日本郵便の郵便番号データは月に1回のペースで更新されることを知りました。
そこで毎月1回、定期的に郵便番号データをダウンロードし
 <b><code>postal-coder.sh</code></b> に合った形式にデータを整形するスクリプト <b><code>fabr-postalcode-DB.sh</code></b> を作りました。
</p>

<p>
その2本のスクリプトの概要を紹介します。
</p>
</div>
</div>


<div id="outline-container-orgf66d857" class="outline-2">
<h2 id="orgf66d857"><span class="section-number-2">2</span> スクリプト</h2>
<div class="outline-text-2" id="text-2">
<dl class="org-dl">
<dt><code>postal-coder.sh</code></dt><dd>住所から郵便番号、郵便番号から住所あるいは事業所名、事業所名から郵便番号と住所をゲットします（コードは <a href="#postal-coder-code">こちら</a>）。</dd>

<dt><code>fabr-postalcode-DB.sh</code></dt><dd>日本郵便のデータをダウロードし <code>postal-coder.sh</code> 用にデータを整形します（おおざっぱなフローは<a href="#org2f7fea2">こちら</a>）。</dd>
</dl>
</div>
</div>

<div id="outline-container-orgd1b9c93" class="outline-2">
<h2 id="orgd1b9c93"><span class="section-number-2">3</span> postal-coder.shスクリプト</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-orgefa5564" class="outline-3">
<h3 id="orgefa5564"><span class="section-number-3">3.1</span> 使用例</h3>
<div class="outline-text-3" id="text-3-1">
<p>
ターミナル上では郵便番号出力は&lt;span style="color:red"&gt;赤字&lt;/span&gt;で表示されます。
</p>
</div>
<div id="outline-container-orgde3df5a" class="outline-4">
<h4 id="orgde3df5a"><span class="section-number-4">3.1.1</span> 住所 <b>→</b> 郵便番号</h4>
<div class="outline-text-4" id="text-3-1-1">
<pre class="example" id="orgc863d2c">
$ postal-coder.sh 緑区鴨居
2260003  神奈川県横浜市緑区鴨居
2260004  神奈川県横浜市緑区鴨居町
</pre>
<p>
検索語の住所にヒットする住所が複数あれば全部表示します。うっかり「東京都」と入力すると破滅的な数の行が表示されます(やってみたら <b>4046行</b> ！) :sweat: 
データ中にヒットする住所が無ければ 
<code>** Not found. Do it agin.</code> を表示して停止します。
</p>
</div>
</div>
<div id="outline-container-org84dec5d" class="outline-4">
<h4 id="org84dec5d"><span class="section-number-4">3.1.2</span> 郵便番号 <b>→</b> 住所</h4>
<div class="outline-text-4" id="text-3-1-2">
<pre class="example" id="orgc8ae830">
$ postal-coder.sh 7290111
7290111 広島県福山市今津町
</pre>
<p>
データに存在しない郵便番号の場合には <code>** Not found. Do it agin.</code> を表示して停止します。
</p>
</div>
</div>

<div id="outline-container-org5757457" class="outline-4">
<h4 id="org5757457"><span class="section-number-4">3.1.3</span> 事業所名 <b>→</b> 郵便番号・住所</h4>
<div class="outline-text-4" id="text-3-1-3">
<pre class="example" id="org626b1e2">
$ postal-coder.sh 培風館
1028260  株式会社　培風館 東京都千代田区九段南４丁目３−１２
</pre>
<p>
支店・支社が複数あれば、それらも全部表示します。
</p>
</div>
</div>

<div id="outline-container-org154577b" class="outline-4">
<h4 id="org154577b"><span class="section-number-4">3.1.4</span> 郵便番号 <b>→</b> 事業者名</h4>
<div class="outline-text-4" id="text-3-1-4">
<pre class="example" id="org8d443de">
$ postal-coder.sh 2148580
2148580  学校法人　専修大学 神奈川県川崎市多摩区東三田２丁目１−１
</pre>
</div>
</div>

<div id="outline-container-org384fc08" class="outline-4">
<h4 id="org384fc08"><span class="section-number-4">3.1.5</span> 応用問題（おまけ）</h4>
<div class="outline-text-4" id="text-3-1-5">
<p>
（Ex.1）虎ノ門ヒルズ３５階の郵便番号を知りたい：
</p>
<pre class="example" id="org653f4c4">
$ postal-coder.sh 虎ノ門ヒルズ | grep ３５
1056435  東京都港区虎ノ門虎ノ門ヒルズビジネスタワー（３５階）
1056335  東京都港区虎ノ門虎ノ門ヒルズ森タワー（３５階）
</pre>
<p>
虎ノ門ヒルズには「ビジネスタワー」と「森タワー」があったんですね :sweat: 
</p>

<p>
日本郵便のDBでは数字はすべて <b>全角数字</b> が使われています。 <code>grep</code> する際には、上のようにハナから全角文字で検索するか、次のように <code>nkf -Z</code> のひと手間かけて半角化しましょう。
</p>
<pre class="example" id="org2e8109c">
$ postal-coder.sh 虎ノ門ヒルズ | nkf -Z | grep 35
1056435  東京都港区虎ノ門虎ノ門ヒルズビジネスタワー(35階)
1056335  東京都港区虎ノ門虎ノ門ヒルズ森タワー(35階)
</pre>


<p>
<br />
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-org6ec2bc7" class="outline-2">
<h2 id="org6ec2bc7"><span class="section-number-2">4</span> fabr-postalcode-DB.shスクリプト</h2>
<div class="outline-text-2" id="text-4">
<p>
このスクリプトでは  
毎月1回、cronで事業所名データ（ <code>jigyosyo.zip</code> ）と全国郵便番号データ( <code>ken_all.zip</code> )に更新があったかどうかをチェックします。
</p>

<p>
もし更新があったら、
zipファイルをダウンロードして解凍し、 <b><code>postal-coder.sh</code></b> スクリプトで使えるように整形して保存します。全国郵便番号データ( <code>ken_all.zip</code> )は <b>1.7MB</b> 、事業所名データ( <code>jigyosyo.zip</code> )は <b>0.7MB</b> 程度なので、回線的にもそれほど大きな負担はないと思います。
</p>

<p>
2022年1月5日には事業所名データ（ <code>jigyosyo.zip</code> ）にも 全国郵便番号データ( <code>ken_all.zip</code> )にも更新が無かったことを示すメッセージがログに残っていました。
</p>
<pre class="example" id="org5ba22f2">
（log-JIGYOSHO.txt）
$ cat log-JIGYOSHO.txt 
--2022-01-05 21:02:01--  https://www.post.japanpost.jp/zipcode/dl/jigyosyo/zip/j
igyosyo.zip
www.post.japanpost.jp (www.post.japanpost.jp) をDNSに問いあわせています... 43.25
3.212.144
www.post.japanpost.jp (www.post.japanpost.jp)|43.253.212.144|:443 に接続していま
す... 接続しました。
HTTP による接続要求を送信しました、応答を待っています... 304 Not Modified
ファイル `/home/yamagami/Dropbox/郵便番号/jigyosyo.zip' はサーバ側で変更されてい
ませんでした。ダウンロードを省略します。
</pre>
<p>
アップデートがなければほとんど何もせずスクリプトは終わります（図<a href="#org2f7fea2">1</a>）。
</p>


<p>
（完）
</p>
</div>
</div>

<div id="outline-container-orgf0577f1" class="outline-2">
<h2 id="orgf0577f1"><span class="section-number-2">5</span> 参考資料（ <code>postal-coder.sh</code> コード）</h2>
<div class="outline-text-2" id="text-5">
<p>
緊急避難的なコードですがとりあえず自家用には動いています。変なところ、小ぎれいにしたいところもたくさんありますが、それは後ほどということであしからず・・・。
</p>
</div>
<div id="outline-container-postal-coder-code" class="outline-3">
<h3 id="postal-coder-code"><span class="section-number-3">5.1</span> postal-coder.sh</h3>
<div class="outline-text-3" id="text-postal-coder-code">
<pre class="example">
#!/bin/bash
#  Postal-coder.sh
#      郵便番号 =&gt; 住所
#      住所     =&gt; 郵便番号・住所
#      事業所名 =&gt;  郵便番号・住所

if [ $# = 0 ]; then
    read -rp "住所/郵便番号/事業者名を入力してください： " keyin
else
    keyin=$1    
fi
#  keyinに半角ハイフンが含まれていたら削除
keyin=${keyin/-/}

#
#  入力判定（郵便番号 or 住所/事業所名)
# 
if [[ "${keyin}" =~ ^[0-9]+$ ]]; then   # keyinが数字のみかどうか
    #  keyinの桁数をチェック ７桁限定
    if [ ${#keyin} != 7 ]; then
	echo "** 郵便番号の桁数は7です."
	exit 0
    fi
    ##  郵便番号から　住所/事業所名を得る
    #
    all_japan_file=$HOME/郵便番号/ALL-JAPAN.csv
    #
    zipcode="${keyin}"
    adrs=$(grep ${zipcode} ${all_japan_file} )
    adrs_only=$(echo ${adrs} |cut -c 8-)
    #
    if [ -n "${adrs}" ]; then
	echo -e "\e[31m${zipcode}\e[m ${adrs_only}"
	exit 0
    else
	echo '** 郵便番号 not found. Do it agin.'
	exit 0
    fi
fi
#
##  住所/事業所名から　郵便番号
#
ippan_file=$HOME/郵便番号/essential-ippan.csv
jigyosho_file=$HOME/郵便番号/essential-jigyosho.csv

# 一般住所データから検索
grep "${keyin}" "${ippan_file}" &gt; ./tmp-ippan-koho.txt
if [ -s ./tmp-ippan-koho.txt ]; then    
    #
    while read line
    do
	zipcode=$(echo "${line}" | cut -b 1-7)
	adrs_koho=$(echo "${line}" | cut -b 8-)
	echo -e "\e[31m${zipcode}\e[m  ${adrs_koho}"
    done &lt; ./tmp-ippan-koho.txt
    rm ./tmp-ippan-koho.txt
    exit 0

else
    grep "${keyin}" "${jigyosho_file}" &gt; ./tmp-jigyosho-koho.txt
    #     ####### 事業所にデータがある場合
    if [ -s ./tmp-jigyosho-koho.txt ]; then
    #
    while read line
    do
	zipcode=$(echo "${line}" | cut -b 1-7)
	adrs_koho=$(echo "${line}" | cut -b 8-)
	echo -e "\e[31m${zipcode}\e[m ${adrs_koho}"
    done &lt; ./tmp-jigyosho-koho.txt
    rm ./tmp-*.txt
    exit 0
    fi
# 作業ファイル削除
    rm ./tmp-*.txt
fi
#
# 入力　みつからず
#
echo '** 入力データ not found. Do it again.'
exit 0
</pre>
</div>
</div>

<div id="outline-container-orgbb07047" class="outline-3">
<h3 id="orgbb07047"><span class="section-number-3">5.2</span> fabr-postalcode-DB.shのフローチャート</h3>
<div class="outline-text-3" id="text-5-2">

<div id="org2f7fea2" class="figure">
<p><img src="../static/fabr-postalcode-DB.sh.jpg" alt="fabr-postalcode-DB.sh.jpg" width="70%" />
</p>
<p><span class="figure-number">&#22259;1:  </span><code>fabr-postalcode-DB.sh</code> のフローチャート</p>
</div>

<p>
<br />
</p>
</div>
</div>
</div>
<div id="outline-container-org61dfea3" class="outline-2">
<h2 id="org61dfea3"><span class="section-number-2">6</span> Footnotes:</h2>
<div class="outline-text-2" id="text-6">
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">&#33050;&#27880;: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
バックアップはとってありましたが、CSVフォーマットで2019年のものしか残っていませんでした。
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
市販の住所録・宛名印刷ソフトでは備わっているのが当たり前のありきたりな機能です。けど重たいアプリを起動したり、ウエッブページを開いて検索したりするのは（若者言葉では）「だるい」。たかが郵便番号と住所ですから・・・。
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
宛名データがとりあえず復旧した後に、そのデータについて郵便番号と住所が一致しているかどうかをチェックする作業を行いました。スクリプトにするほどでもなく、ワンライナーですが、注意深く入力した積りでもタイプミスがあることを改めて思い知らされました。
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
残っていたCSVファイルをEmacsのCSVモードで読み込み、それに追記・修正を加えるという形で行いました。復旧したデータも当然CSVです。なお宛名の印刷途中で自宅のインクジェット プリンタ＝Canon <b>iP7230</b> (2012年製)が <b><code>B200</code></b> エラーを吐いて止まるというシリアスなトラブルが発生。これも何とか迂回して、やっとこさで印刷が終わりました。今年の年賀状発送はほんとうに大変でした :sweat:
</p></div></div>


</div>
</div></div>
<div id="postamble" class="status">
<p class="date">&#26085;&#20184;: 2022-01-11 火 00:00</p>
<p class="author">&#33879;&#32773;: YAMAGAMI</p>
<p class="date">Created: 2022-01-11 火 21:19</p>
<p class="validation"><a href="https://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
